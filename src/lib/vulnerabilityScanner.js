import chalk from 'chalk';

/**
 * Scans a Solana program binary for vulnerabilities, detecting issues like unchecked minting,
 * reentrancy, arithmetic overflows, and more.
 *
 * @param {Object} analysis - Binary analysis insights from analyzer.js.
 * @returns {Promise<Array>} - Array of vulnerability objects.
 */
export async function scanVulnerabilities(analysis) {
  try {
    if (!analysis?.insights) throw new Error('Invalid analysis insights');
    const vulnerabilities = [];
    const { insights } = analysis;

    if (insights.hiddenMint) {
      vulnerabilities.push({
        type: 'Unchecked Minting',
        severity: 'High',
        details: 'Potential unauthorized token minting detected.',
        confidence: 80,
        mitigation: 'Verify minting constraints and restrict mint authority.',
        affectedComponent: 'Token Logic',
      });
    }

    if (insights.reentrancyRisk === 'Moderate' || insights.reentrancyRisk === 'High') {
      vulnerabilities.push({
        type: 'Reentrancy',
        severity: insights.reentrancyRisk === 'High' ? 'High' : 'Moderate',
        details: `Risk of reentrant calls in instruction flow.`,
        confidence: insights.reentrancyRisk === 'High' ? 85 : 70,
        mitigation: 'Implement reentrancy guards and audit instruction flow.',
        affectedComponent: 'Instruction Flow',
      });
    }

    if (insights.instructions > 500 && insights.syscalls.includes('sol_invoke')) {
      vulnerabilities.push({
        type: 'Arithmetic Overflow/Underflow',
        severity: 'Moderate',
        details: 'Potential for arithmetic issues in complex logic.',
        confidence: 75,
        mitigation: 'Use checked arithmetic and validate calculations.',
        affectedComponent: 'Arithmetic Logic',
      });
    }

    if (!insights.syscalls.includes('sol_verify_signature') && insights.suspectedType !== 'governance') {
      vulnerabilities.push({
        type: 'Unverified Signatures',
        severity: 'High',
        details: 'No signature verification detected.',
        confidence: 90,
        mitigation: 'Implement sol_verify_signature for critical instructions.',
        affectedComponent: 'Authentication Logic',
      });
    }

    if (insights.authorityHolders.length === 1) {
      vulnerabilities.push({
        type: 'Excessive Authority Control',
        severity: 'Moderate',
        details: 'Single authority increases centralization risk.',
        confidence: 85,
        mitigation: 'Use multisig or distribute authority.',
        affectedComponent: 'Authority Management',
      });
    }

    if (insights.usesBorsh) {
      vulnerabilities.push({
        type: 'Borsh Deserialization Vulnerability',
        severity: 'Moderate',
        details: 'Borsh serialization may lead to deserialization issues.',
        confidence: 70,
        mitigation: 'Validate deserialized data and enforce type checking.',
        affectedComponent: 'Data Serialization',
      });
    }

    return vulnerabilities;
  } catch (err) {
    console.warn(chalk.yellow(`Vulnerability scan failed: ${err.message}`));
    return [];
  }
}